name: Deploy to DigitalOcean üöÄ

on:
  workflow_dispatch:
    inputs:
      deploy_type:
        description: "Choose deployment type"
        required: true
        default: "build"
        type: choice
        options:
          - build
          - clean
  push:
    branches: [ "master" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (contains(github.event.head_commit.message, '[deploy]') || contains(github.event.head_commit.message, '[build]')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_type == 'build')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run SSH commands on DigitalOcean
        id: deploy_step
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: root
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            echo "‚úÖ Connected to DigitalOcean!"
            cd BetweenUsServer/
            echo "üì¶ Pulling latest code..."
            docker compose down 
            git pull origin master
            docker compose up --build -d
            echo "‚úÖ Deployment Finished"

            echo "üìä Gathering System Info..."
            df -h
            free -m
            uptime
            ps aux --sort=-%mem | head -n 10
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            docker compose logs --tail=20

  clean_deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.event.head_commit.message, '[clean]') || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_type == 'clean')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run SSH commands on DigitalOcean
        id: clean_step
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: root
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            echo "‚úÖ Connected to DigitalOcean!"
            cd BetweenUsServer/
            echo "üßπ Performing clean deployment..."
            docker compose down --rmi all --volumes
            git pull origin master
            docker compose up --build -d
            echo "‚úÖ Clean Deployment Finished"

            echo "üìä Gathering System Info..."
            df -h
            free -m
            uptime
            ps aux --sort=-%mem | head -n 10
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            docker compose logs --tail=20

  report:
    runs-on: ubuntu-latest
    needs: [deploy, clean_deploy]
    if: always() && (needs.deploy.result != 'skipped' || needs.clean_deploy.result != 'skipped')
    steps:
      - name: Deployment Report
        run: |
          echo "üì¢ Deployment Report"
          echo "---------------------"
          echo "Repository: $GITHUB_REPOSITORY"
          echo "Commit: $GITHUB_SHA"
          echo "Commit Message: ${{ github.event.head_commit.message }}"
          echo "Triggered by: $GITHUB_ACTOR"
          
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Deploy Type: ${{ github.event.inputs.deploy_type }}"
          else
            if echo "${{ github.event.head_commit.message }}" | grep -q "\[clean\]"; then
              echo "Deploy Type: clean"
            else
              echo "Deploy Type: build"
            fi
          fi

          echo "---------------------"
          echo "üîé Job Results"
          echo "Deploy Job: ${{ needs.deploy.result }}"
          echo "Clean Deploy Job: ${{ needs.clean_deploy.result }}"

          if [ "${{ needs.deploy.result }}" == "success" ] || [ "${{ needs.clean_deploy.result }}" == "success" ]; then
            echo "‚úÖ Deployment Successful!"
          else
            echo "‚ùå Deployment Failed!"
          fi

  notify:
    runs-on: ubuntu-latest
    needs: [deploy, clean_deploy]
    if: always() && (needs.deploy.result != 'skipped' || needs.clean_deploy.result != 'skipped')
    steps:
      - name: Send Signal Notification
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          EXEC_TIME=$(date '+%Y-%m-%d %H:%M:%S')
          
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            DEPLOY_TYPE="${{ github.event.inputs.deploy_type }}"
          else
            if echo "$COMMIT_MSG" | grep -q "\[clean\]"; then
              DEPLOY_TYPE="clean"
            else
              DEPLOY_TYPE="build"
            fi
          fi

          if [ "${{ needs.deploy.result }}" == "success" ] || [ "${{ needs.clean_deploy.result }}" == "success" ]; then
            STATUS="‚úÖ Deployment Successful"
          else
            STATUS="‚ùå Deployment Failed"
          fi

          MESSAGE="üöÄ $STATUS%0Aüìù Commit: $COMMIT_MSG%0A‚ö° Type: $DEPLOY_TYPE%0A‚è∞ Time: $EXEC_TIME"
          curl -s "https://signal.callmebot.com/signal/send.php?${{ secrets.CALL_ME_API_PARAMS }}&text=${MESSAGE}"
